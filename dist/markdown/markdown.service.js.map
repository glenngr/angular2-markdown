{"version":3,"sources":["../../src/markdown/markdown.service.ts"],"names":[],"mappings":"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","file":"markdown.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Http, Response} from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport * as  marked from 'marked';\r\n\r\nimport 'rxjs/add/observable/throw';\r\nimport 'rxjs/add/operator/catch';\r\nimport 'rxjs/add/operator/map';\r\n\r\n\r\n\r\nexport class MarkdownService {\r\n  private renderer:any;\r\n  constructor(private http: Http) {\r\n    this.extendRenderer();\r\n    this.setMarkedOptions();\r\n  }\r\n\r\n  //get the content from remote resource\r\n  getContent(path: string):Observable<any> {\r\n    return this.http.get(path)\r\n       .map(this.extractData)\r\n       .catch(this.handleError);\r\n   }\r\n\r\n   // handle data\r\n   extractData(res: Response): string {\r\n     return res.text() || '';\r\n   }\r\n\r\n   //handle error\r\n   handleError(error: Response | any):any {\r\n     let errMsg: string;\r\n     if (error instanceof Response) {\r\n       const body = error.json() || '';\r\n       const err = body.error || JSON.stringify(body);\r\n       errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\r\n     } else {\r\n       errMsg = error.message ? error.message : error.toString();\r\n     }\r\n     console.error(errMsg);\r\n     return Observable.throw(errMsg);\r\n   }\r\n\r\n   // extend marked render to support todo checkbox\r\n   extendRenderer() {\r\n     this.renderer = new marked.Renderer();\r\n     this.renderer.listitem = function(text:string) {\r\n      if (/^\\s*\\[[x ]\\]\\s*/.test(text)) {\r\n      text = text\r\n        .replace(/^\\s*\\[ \\]\\s*/, '<input type=\"checkbox\" style=\" vertical-align: middle; margin: 0 0.2em 0.25em -1.6em; font-size: 16px; \" disabled> ')\r\n        .replace(/^\\s*\\[x\\]\\s*/, '<input type=\"checkbox\" style=\" vertical-align: middle; margin: 0 0.2em 0.25em -1.6em; font-size: 16px; \" checked disabled> ');\r\n          return '<li style=\"list-style: none\">' + text + '</li>';\r\n        } else {\r\n          return '<li>' + text + '</li>';\r\n        }\r\n      };\r\n   }\r\n\r\n   setMarkedOptions() {\r\n     marked.setOptions({\r\n       renderer: this.renderer,\r\n       gfm: true,\r\n       tables: true,\r\n       breaks: false,\r\n       pedantic: false,\r\n       sanitize: false,\r\n       smartLists: true,\r\n       smartypants: false\r\n     });\r\n\r\n   }\r\n\r\n   // comple markdown to html\r\n   compile(data:string) {\r\n      return marked(data);\r\n   }\r\n\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}